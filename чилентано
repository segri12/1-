using System;
using System.Collections.Generic;
using System.Linq;

namespace LINQ_список_с_преступниками
{
    class Program
    {
        static void Main(string[] args)
        {
            Menu _catalog = new Menu();
            _catalog.RunGameLoop();
        }
    }

    enum Nationalities 
    {
        Russian,
        Ukrainian,
        Italian,
        American,
        Moroccan,
        Chinese,
        German,
        French,
        Spanish,
        British,
        Canadian,
        Australian,
        Japanese,
        Korean,
        Mexican,
        Indian,
        Brazilian,
        Turkish,
        Polish,
    }

    enum Names  
    {
        Jack,
        Amelia,
        Oliver,
        Sophia,
        Liam,
        Emily,
        Benjamin,
        Charlotte,
        Henry,
        Ava,
        Alexander,
        Mia,
        William,
        Isabella,
        James,
        Olivia
    }

    class Menu
    {
        private List<Criminals> _listCriminals = new List<Criminals>();  

        public Menu() 
        {
            AddCriminals();
        }

        public void RunGameLoop()
        {
            const string CommandSearch = "1";
            const string CommandShowAllCriminals = "2";
            const string CommandExitMenu = "3";

            bool isRunGameLoop = true;

            Console.Clear();

            while (isRunGameLoop)
            {
                Console.WriteLine("Меню поиска:");
                Console.WriteLine($"{CommandSearch} - ввести приметы");
                Console.WriteLine($"{CommandShowAllCriminals} - показать всех преступников");
                Console.WriteLine($"{CommandExitMenu} - выход");

                Console.Write("\nВведите команду: ");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandSearch:
                        ShowSearchMenu();
                        break;

                    case CommandShowAllCriminals:
                        ShowCriminals();
                        break;

                    case CommandExitMenu:
                        isRunGameLoop = false;
                        break;

                    default:
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }

        private void AddCriminals()
        {
            int minCount = 50;
            int maxCount = 100;
            int countCriminals = UserUtils.GenerateRandomNumber(minCount, maxCount);

            for (int i = 0; i < countCriminals; i++)
            {
                _listCriminals.Add(new Criminals());
            }
        }

        private void ShowCriminals() 
        {
            int index = 0;

            foreach (var criminals in _listCriminals)
            {
                Console.Write(++index + ". ");

                criminals.ShowInfo();
            }
        }

        private void ShowSearchMenu()
        {
            Console.Write("\nВведите рост преступника: ");

            if (int.TryParse(Console.ReadLine(), out int height) == false || height <= 0)
            {
                Console.WriteLine("\nНекорректные данные");
                return;
            }

            Console.Write("Введите вес преступника: ");

            if (int.TryParse(Console.ReadLine(), out int weight) == false || weight <= 0)
            {
                Console.WriteLine("\nНекорректные данные");
                return;
            }

            Console.Write("Введите национальность преступника: ");

            string nationality = Console.ReadLine();

            if (nationality == "")
            {
                Console.WriteLine("\nНекорректные данные");
                return;
            }

            ShowCriminalsByParameters(height, weight, nationality);
        }

        private void ShowCriminalsByParameters(int height, int weight, string nationality)
        {
            int middleValue = 15;

            if (height > 0 && weight > 0 && nationality != "")
            {
                _listCriminals = _listCriminals.Where(criminal => criminal.Height <= height + middleValue)
                                               .Where(criminal => criminal.Height >= height - middleValue)
                                               .Where(criminal => criminal.Weight <= weight + middleValue)
                                               .Where(criminal => criminal.Weight >= weight - middleValue)
                                               .Where(criminal => criminal.Nationality == nationality)
                                               .Where(criminal => criminal.IsPrisoner == false)
                                               .ToList();

                int index = 0;

                Console.WriteLine($"\nСписок преступников с похожими приметами отсутствует, возможно в здание крыса и начинает всё подчищать будь на готове. Тайный агент: 0,7");

                if (_listCriminals.Count() > 0)
                {
                    foreach (var criminal in _listCriminals)
                    {
                        Console.Write(++index + ". ");
                        criminal.ShowInfo();
                    }
                }
                else
                {
                    Console.WriteLine("Совпадений не найдено увы.");
                }
            }
        }

        class Criminals
        {
            public Criminals()
            {
                Name = NameOrientation();
                Nationality = NationalityOrientation();
                Height = GrowthOrientation();
                Weight = WeightQuide();
                IsPrisoner = IsCriminalInPrison();
            }

            public string Name { get; private set; }
            public string Nationality { get; private set; }
            public int Height { get; private set; }
            public int Weight { get; private set; }
            public bool IsPrisoner { get; private set; }

            public void ShowInfo()
            {
                string status;
                if (IsPrisoner)
                {
                    status = "сидит в тюрьме";
                }
                else
                {
                    status = "находится на свободе";
                }
                Console.WriteLine($"Имя: {Name}, Национальность: {Nationality}, Рост: {Height} см, Вес: {Weight} кг, {status}");
            }

            private int WeightQuide() 
            {
                int minWeight = 30;
                int maxWeight = 150;

                return UserUtils.GenerateRandomNumber(minWeight, maxWeight);
            }

            private int GrowthOrientation() 
            {
                int minHeight = 120;
                int maxHeight = 230;

                return UserUtils.GenerateRandomNumber(minHeight, maxHeight);
            }

            private string NameOrientation()  
            {
                int count = Enum.GetNames(typeof(Names)).Length;
                int index = UserUtils.GenerateRandomNumber(0, count);

                return Enum.GetName(typeof(Names), index);
            }

            private string NationalityOrientation() 
            {
                int count = Enum.GetNames(typeof(Nationalities)).Length;
                int index = UserUtils.GenerateRandomNumber(0, count);

                return Enum.GetName(typeof(Nationalities), index);
            }

            private bool IsCriminalInPrison() 
            {
                bool[] randomBool = new bool[] { false, true };

                return randomBool[UserUtils.GenerateRandomNumber(0, randomBool.Length)];
            }
        }
    }

    static class UserUtils
    {
        private static readonly Random s_random = new Random();

        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max);
        }
    }
}
